{"version":3,"sources":["services/note.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNACMA,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCF9BK,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCE3BK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,qBAAKJ,UAAU,QAAf,SAAwBI,KCYlBC,EAjBA,WAOb,OACE,sBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACE,uBACA,2GC+ESC,EArFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBjC,MAAK,SAACkC,GACzBT,EAASS,QAEV,IAGH,IAoBMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAC5B,GAAD,OAA6B,IAAnBA,EAAKG,aAsBhC,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASc,IACvB,8BACE,yBAAQhB,QAAS,kBAAMe,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,+BACE,6BACGO,EAAYE,KAAI,SAAC7B,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAnCH,SAACJ,GAC1B,IAAMG,EAAOgB,EAAMc,MAAK,SAACC,GAAD,OAAOA,EAAElC,KAAOA,KAClCmC,EAAW,2BAAQhC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EACU5B,EAAImC,GACXxC,MAAK,SAACyC,GACLhB,EAASD,EAAMa,KAAI,SAAC7B,GAAD,OAAWA,EAAKH,KAAOA,EAAKG,EAAOiC,SAEvDC,OAAM,SAACC,GACNZ,EAAgB,SAAD,OACJvB,EAAKK,QADD,sCAGf+B,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAACG,GAAD,OAAOA,EAAElC,KAAOA,SAmBRwC,CAAmBrC,EAAKH,MAF3CG,EAAKH,SAMhB,uBAAMyC,SA/DI,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBpC,QAASa,EACTwB,MAAM,IAAIC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,IAI7BrB,EAAmBgB,GAAYjD,MAAK,SAACyC,GACnChB,EAASD,EAAM+B,OAAOd,IACtBd,EAAW,QAoDT,UACE,uBAAO6B,MAAO9B,EAAS+B,SAjDN,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB7B,EAAWoB,EAAMa,OAAOJ,UAgDlB,wBAAQK,KAAK,SAAb,wBAGJ,cAAC,EAAD,QCvCNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7d2c3e82.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React from \"react\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2021\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport noteService from \"./services/note\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  // console.log(\"render\", notes.length, \"notes\");\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      // id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        <ul>\n          {notesToShow.map((note) => (\n            <Note\n              key={note.id}\n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n          ))}\n        </ul>\n        <form onSubmit={addNote}>\n          <input value={newNote} onChange={handleNoteChange} />\n          <button type=\"submit\">save</button>\n        </form>\n      </ul>\n      <Footer></Footer>\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import reportWebVitals from \"./reportWebVitals\";\n\n/** \n const History = (props) => {\n  if (props.allClicks.length === 0) {\n    return <div>the app is used by pressing the buttons</div>;\n  }\n\n  return <div>button press history: {props.allClicks.join(\" \")}</div>;\n};\n\nconst Button = ({ onClick, text }) => <button onClick={onClick}>{text}</button>;\n\nconst App = (props) => {\n  const [left, setLeft] = useState(0);\n  const [right, setRight] = useState(0);\n  const [allClicks, setAll] = useState([]);\n\n  const handleLeftClick = () => {\n    setAll(allClicks.concat(\"L\"));\n    setLeft(left + 1);\n  };\n\n  const handleRightClick = () => {\n    setAll(allClicks.concat(\"R\"));\n    setRight(right + 1);\n  };\n\n  return (\n    <div>\n      <div>\n        {left}\n        <Button onClick={handleLeftClick} text=\"left\" />\n        <Button onClick={handleRightClick} text=\"right\" />\n        {right}\n        <History allClicks={allClicks} />\n      </div>\n    </div>\n  );\n};\n\nlet counter = 1\n*/\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}